{"version":3,"sources":["types/CompletionStatus.enum.ts","features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","api.ts","components/Loader/Loader.tsx","services/getFilteredTodos.ts","components/TodoList/ui/TableItem/TableItem.tsx","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["CompletionStatus","actions","todo","type","payload","currentTodoReducer","state","action","query","filter","initialState","All","filterReducer","filters","todos","todosReducer","rootReducer","combineReducers","currentTodo","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Loader","className","getFilteredTodos","filteredTodos","normalizedQuery","toLowerCase","title","includes","filterByQuery","status","Active","completed","Completed","filterByStatus","TableItem","dispatch","id","classNames","onClick","currentTodoActions","TodoList","filterParams","length","map","TodoFilter","onSubmit","event","preventDefault","value","onChange","currentFilter","target","filterActions","Object","entries","key","placeholder","searchData","style","pointerEvents","TodoModal","userId","useState","isLoading","setIsLoading","user","setUser","useEffect","getUser","catch","finally","href","email","name","App","setTodos","todosFromServer","todosActions","setIsloading","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.16086beb.chunk.js","sourcesContent":["export enum CompletionStatus {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/REMOVE':\n      return null;\n\n    case 'currentTodo/SET':\n      return action.payload;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { FiltersType } from 'types/Filters';\nimport { CompletionStatus } from 'types/CompletionStatus.enum';\n\ntype SetQueryAction = {\n  type: 'filter/SET-QUERY'\n  payload: string\n};\n\ntype ClearQuery = {\n  type: 'filter/CLEAR-QUERY'\n};\n\ntype SelectFilter = {\n  type: 'filter/SELECT-COMPLETION-STATUS',\n  payload: CompletionStatus,\n};\n\nconst setQuery = (query: string): SetQueryAction => ({\n  type: 'filter/SET-QUERY',\n  payload: query,\n});\n\nconst clearQuery = (): ClearQuery => ({\n  type: 'filter/CLEAR-QUERY',\n});\n\nconst selectFilter = (filter: CompletionStatus): SelectFilter => ({\n  type: 'filter/SELECT-COMPLETION-STATUS',\n  payload: filter,\n});\n\nexport const actions = {\n  setQuery,\n  clearQuery,\n  selectFilter,\n};\n\ntype Action = SetQueryAction | ClearQuery | SelectFilter;\n\nconst initialState: FiltersType = {\n  query: '',\n  filter: CompletionStatus.All,\n};\n\nconst filterReducer\n= (filters: FiltersType = initialState, action: Action): FiltersType => {\n  switch (action.type) {\n    case 'filter/SET-QUERY':\n      return ({\n        ...filters,\n        query: action.payload,\n      });\n\n    case 'filter/CLEAR-QUERY':\n      return ({\n        ...filters,\n        query: '',\n      });\n\n    case 'filter/SELECT-COMPLETION-STATUS':\n      return ({\n        ...filters,\n        filter: action.payload,\n      });\n\n    default:\n      return filters;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetTodosAction = {\n  type: 'todos/SET'\n  payload: Todo[]\n};\n\nconst setTodos = (todos: Todo[]): SetTodosAction => ({\n  type: 'todos/SET',\n  payload: todos,\n});\n\nexport const actions = { setTodos };\n\ntype Action = SetTodosAction;\n\nconst todosReducer = (todos: Todo[] = [], action: Action): Todo[] => {\n  switch (action.type) {\n    case 'todos/SET':\n      return action.payload;\n\n    default:\n      return todos;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from 'types/Todo';\nimport { CompletionStatus } from 'types/CompletionStatus.enum';\nimport { FiltersType } from 'types/Filters';\n\nconst filterByQuery = (todos: Todo[], query: string) => {\n  const normalizedQuery = query.toLowerCase();\n\n  return todos\n    .filter(({ title }) => title.toLowerCase().includes(normalizedQuery));\n};\n\nconst filterByStatus = (todos: Todo[], status: CompletionStatus) => {\n  switch (status) {\n    case CompletionStatus.Active:\n      return todos.filter(({ completed }) => !completed);\n\n    case CompletionStatus.Completed:\n      return todos.filter(({ completed }) => completed);\n\n    default:\n      return todos;\n  }\n};\n\nexport const getFilteredTodos = (todos: Todo[], filters: FiltersType) => {\n  const { query, filter } = filters;\n  let filteredTodos: Todo[] = [...todos];\n\n  if (query) {\n    filteredTodos = filterByQuery(filteredTodos, query);\n  }\n\n  filteredTodos = filterByStatus(filteredTodos, filter);\n\n  return filteredTodos;\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from 'types/Todo';\nimport { useAppDispatch, useAppSelector } from 'app/hooks';\nimport { actions as currentTodoActions } from 'features/currentTodo';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TableItem: React.FC<Props> = ({ todo }) => {\n  const dispatch = useAppDispatch();\n  const currentTodo = useAppSelector((state) => state.currentTodo);\n\n  // prettier-ignore\n  const setTodo = () => dispatch(\n    currentTodoActions.setTodo(todo),\n  );\n\n  const { id, completed, title } = todo;\n\n  return (\n    <tr data-cy=\"todo\">\n      <td className=\"is-vcentered\">{id}</td>\n      <td className=\"is-vcentered\">\n        {completed && (\n          <span className=\"icon\" data-cy=\"iconCompleted\">\n            <i className=\"fas fa-check\" />\n          </span>\n        )}\n      </td>\n\n      <td className=\"is-vcentered is-expanded\">\n        <p\n          className={classNames({\n            'has-text-success': completed,\n            'has-text-danger': !completed,\n          })}\n        >\n          {title}\n        </p>\n      </td>\n\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          onClick={setTodo}\n          data-cy=\"selectButton\"\n          className=\"button\"\n          type=\"button\"\n        >\n          <span className=\"icon\">\n            <i\n              className={classNames('far', {\n                'fa-eye-slash': currentTodo?.id === id,\n                'fa-eye': currentTodo?.id !== id,\n              })}\n            />\n          </span>\n        </button>\n      </td>\n    </tr>\n  );\n};\n","import { getFilteredTodos } from 'services';\nimport { useAppSelector } from 'app/hooks';\nimport { TableItem } from './ui/TableItem';\n\nexport const TodoList = () => {\n  const filterParams = useAppSelector((state) => state.filter);\n  const todos = useAppSelector((state) => state.todos);\n  const filteredTodos = getFilteredTodos(todos, filterParams);\n\n  if (!filteredTodos.length) {\n    return (\n      <p className=\"notification is-warning\">\n        There are no todos matching current filter criteria\n      </p>\n    );\n  }\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {filteredTodos.map((todo) => (\n          <TableItem key={todo.id} todo={todo} />\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import React from 'react';\nimport { useAppDispatch, useAppSelector } from 'app/hooks';\nimport { actions as filterActions } from 'features/filter';\n\nimport { CompletionStatus } from 'types/CompletionStatus.enum';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const { query, filter } = useAppSelector((state) => state.filter);\n\n  const setQuery = (searchData: string) => dispatch(\n    filterActions.setQuery(searchData),\n  );\n  const clearQuery = () => dispatch(\n    filterActions.clearQuery(),\n  );\n  const setFilter = (currentFilter: CompletionStatus) => dispatch(\n    filterActions.selectFilter(currentFilter),\n  );\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={(event) => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            value={filter}\n            onChange={\n              (event) => setFilter(event.target.value as CompletionStatus)\n            }\n            data-cy=\"statusSelect\"\n          >\n            {Object.entries(CompletionStatus).map(([key, value]) => (\n              <option key={key} value={value}>\n                {key}\n              </option>\n            ))}\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(event) => setQuery(event.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {query && (\n            <button\n              aria-label=\"clear\"\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={clearQuery}\n            />\n          )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { Todo } from 'types/Todo';\nimport { User } from 'types/User';\nimport { getUser } from 'api';\nimport { actions as currentTodoActions } from 'features/currentTodo';\nimport { useAppDispatch } from 'app/hooks';\n\nimport { Loader } from '../Loader';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoModal: React.FC<Props> = ({ todo }) => {\n  const {\n    id, title, completed, userId,\n  } = todo;\n\n  const dispatch = useAppDispatch();\n  const removeTodo = () => dispatch(\n    currentTodoActions.removeTodo(),\n  );\n\n  const [isLoading, setIsLoading] = useState(true);\n  const [user, setUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getUser(userId)\n      .then(setUser)\n      .catch()\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  if (isLoading) {\n    return (\n      <div className=\"modal is-active\" data-cy=\"modal\">\n        <div className=\"modal-background\" />\n\n        <Loader />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      <div className=\"modal-card\">\n        <header className=\"modal-card-head\">\n          <div\n            className=\"modal-card-title has-text-weight-medium\"\n            data-cy=\"modal-header\"\n          >\n            {`Todo #${id}`}\n          </div>\n\n          <button\n            aria-label=\"close\"\n            onClick={removeTodo}\n            type=\"button\"\n            className=\"delete\"\n            data-cy=\"modal-close\"\n          />\n        </header>\n\n        <div className=\"modal-card-body\">\n          <p className=\"block\" data-cy=\"modal-title\">\n            {title}\n          </p>\n\n          <p className=\"block\" data-cy=\"modal-user\">\n            {completed ? (\n              <strong className=\"has-text-success\">Done</strong>\n            ) : (\n              <strong className=\"has-text-danger\">Planned</strong>\n            )}\n\n            {' by '}\n            <a href={`\"mailto:${user?.email}`}>{user?.name}</a>\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { useAppSelector, useAppDispatch } from 'app/hooks';\n\nimport { Todo } from 'types/Todo';\nimport { actions as todosActions } from 'features/todos';\n\nimport { getTodos } from 'api';\n\nimport { Loader } from 'components/Loader';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\n\nexport const App: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const currentTodo = useAppSelector((state) => state.currentTodo);\n\n  // prettier-ignore\n  const setTodos = (todosFromServer: Todo[]) => dispatch(\n    todosActions.setTodos(todosFromServer),\n  );\n\n  const [isLoading, setIsloading] = useState(true);\n\n  useEffect(() => {\n    setIsloading(true);\n    getTodos()\n      .then(setTodos)\n      .catch()\n      .finally(() => setIsloading(false));\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            {isLoading ? (\n              <Loader />\n            ) : (\n              <>\n                <h1 className=\"title\">Todos:</h1>\n\n                <div className=\"block\">\n                  <TodoFilter />\n                </div>\n\n                <div className=\"block\">\n                  <TodoList />\n                </div>\n              </>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && <TodoModal todo={currentTodo} />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}